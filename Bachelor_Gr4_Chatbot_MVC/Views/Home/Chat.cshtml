
@{
    ViewData["Title"] = "Chat";
}

@section AddToHead{
    <link href="@Url.Content("~/css/popUpChat.css")" rel="stylesheet" type="text/css" />
}

<h2>Chat</h2>
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
</div>


 <!-- PopUp chatbox -->


<div class="chatbox chatbox--tray">
    <div class="chatbox__title">
        <h5><a href="#">ChatBot</a></h5>
        <button class="chatbox__title__tray">
            <span></span>
        </button>
        <button class="chatbox__title__close">
            <span>
                <svg viewBox="0 0 12 12" width="12px" height="12px">
                    <line stroke="#FFFFFF" x1="11.75" y1="0.25" x2="0.25" y2="11.75"></line>
                    <line stroke="#FFFFFF" x1="11.75" y1="11.75" x2="0.25" y2="0.25"></line>
                </svg>
            </span>
        </button>
    </div>
    <div class="chatbox__body">
        <div class="chatbox__body__message chatbox__body__message--left">
            <img src="~/images/narvik_kommune_small.jpg" alt="Picture">
            <p>Hei, og velkommen til Narvik Kommunes websider. Er det noe jeg kan hjelpe deg med?</p>
        </div>
        <div class="chatbox__body__message chatbox__body__message--right">
            <img src="~/images/user.png" alt="Picture">
            <p>
                Hei, jeg ønsker at min datter skal lære å spille blokkfløyte. Vi har nettopp flyttet
                til Narvik kommune - hva gjør jeg for å melde henne på?
            </p>
        </div>
        <div class="chatbox__body__message chatbox__body__message--left">
            <img src="~/images/narvik_kommune_small.jpg" alt="Picture">
            <p>Mente du " vil lære å spille et instrument" eller "er flyttet til Narvik"</p>
        </div>
        <div class="chatbox__body__message chatbox__body__message--right">
            <img src="~/images/user.png" alt="Picture">
            <p>vil lære å spille et instrument</p>
        </div>
        <div class="chatbox__body__message chatbox__body__message--right">
            <img src="~/images/narvik_kommune_small.jpg" alt="Picture">
            <p>Du kan finne informasjon på denne <a href="#">linken</a></p>
        </div>
        <div class="chatbox__body__message chatbox__body__message--right">
            <img src="~/images/narvik_kommune_small.jpg" alt="Picture">
            <p>Fikk du svar på det du spurte om?</p>
        </div>
    </div>
    <!--
    <form class="chatbox__credentials">
        <div class="form-group">
            <label for="inputName">Name:</label>
            <input type="text" class="form-control" id="inputName" required>
        </div>
        <div class="form-group">
            <label for="inputEmail">Email:</label>
            <input type="email" class="form-control" id="inputEmail" required>
        </div>
        <button type="submit" class="btn btn-success btn-block">Enter Chat</button>
    </form>
    -->

    <textarea class="chatbox__message" placeholder="Skriv din kommentar her..."></textarea>
    
</div>












@section Scripts {
    
<!--Add script to update the page and send messages.-->
<!--<script src="~/scripts/popupChat.js"></script>-->
<script src="~/scripts/signalr-client-1.0.0-alpha2-final.js"></script>

<script>
    (function ($) {
        $(document).ready(function () {
            var $chatbox = $('.chatbox'),
                $chatboxTitle = $('.chatbox__title'),
                $chatboxTitleClose = $('.chatbox__title__close');

            $chatboxTitle.on('click', function () {
                $chatbox.toggleClass('chatbox--tray');
            });
            $chatboxTitleClose.on('click', function (e) {
                e.stopPropagation();
                $chatbox.addClass('chatbox--closed');
            });
            $chatbox.on('transitionend', function () {
                if ($chatbox.hasClass('chatbox--closed')) $chatbox.remove();

            });
            //$chatboxCredentials.on('submit', function(e) {
            //    e.preventDefault();
            //    $chatbox.removeClass('chatbox--empty');
            //});
        });
    })(jQuery);
</script>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {
        var messageInput = document.getElementById('message');

        // Get the user name and store it to prepend to messages.
        var name = 'demo-user';
        // Set initial focus to message input box.
        messageInput.focus();

        // Start the connection.
        startConnection('/chat', function (connection) {
            // Create a function that the hub can call to broadcast messages.
            connection.on('broadcastMessage', function (message) {
                // Html encode display name and message.
                //var encodedName = name;
                var encodedMsg = message;
                // Add the message to the page.
                var liElement = document.createElement('li');
                liElement.innerHTML = '<strong>' + '</strong>:&nbsp;&nbsp;' + encodedMsg;
                document.getElementById('discussion').appendChild(liElement);
            });
        })
            .then(function (connection) {
                console.log('connection started');
                document.getElementById('sendmessage').addEventListener('click', function (event) {
                    // Call the Send method on the hub.
                    connection.invoke('send', messageInput.value);

                    // Clear text box and reset focus for next comment.
                    messageInput.value = '';
                    messageInput.focus();
                    event.preventDefault();
                });
            })
            .catch(error => {
                console.error(error.message);
            });

        // Starts a connection with transport fallback - if the connection cannot be started using
        // the webSockets transport the function will fallback to the serverSentEvents transport and
        // if this does not work it will try longPolling. If the connection cannot be started using
        // any of the available transports the function will return a rejected Promise.
        function startConnection(url, configureConnection) {
            return function start(transport) {
                console.log(`Starting connection using ${signalR.TransportType[transport]} transport`)
                var connection = new signalR.HubConnection(url, { transport: transport });
                if (configureConnection && typeof configureConnection === 'function') {
                    configureConnection(connection);
                }

                return connection.start()
                    .then(function () {
                        return connection;
                    })
                    .catch(function (error) {
                        console.log(`Cannot start the connection use ${signalR.TransportType[transport]} transport. ${error.message}`);
                        if (transport !== signalR.TransportType.LongPolling) {
                            return start(transport + 1);
                        }

                        return Promise.reject(error);
                    });
            }(signalR.TransportType.WebSockets);
        }
    });
</script>
}
